s
s
s
s
s
s
s
s
continue
finish
finish
continue
exit
b phase_3
run
si
si
si
si
si
si
si
x/s $rbx
si
si
si
si
si
si
s
si
x/s %r13
x/s $r13
si
x/s $rcx
si
x/s $rax
si
x/s $rsi
s
run
break *0x40207e
continue
si
x/s $rdi
x/s $rsi
s
break *0x402075
run < input.txt
x/dw $rsp+0xc
x/dw $rsp+0x10
continue
run < input.txt
break *0x401fcf
continue
x/d $rsi
exit
run < input.txt
run < input.txtexiy
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
run < input.txt
run < input.txt
run
exit
run
exit
run
exit
run
run
exit
run
run
    """
    Realiza una búsqueda binaria recursiva en 'words' para encontrar 'target'
    y devuelve el número de recursiones empleadas.
    Args:
        words (list): Lista ordenada de palabras.
        target (str): Palabra a buscar.
        low (int): Índice inferior de la búsqueda.
        high (int): Índice superior de la búsqueda.
        count (int): Contador de llamadas recursivas.
    Returns:
        int: Número de recursiones hasta encontrar target, o None si no se halla.
    """
    if low > high:
        return None
    mid = (low + high) // 2
    count += 1
    if words[mid] == target:
        return count
    elif target < words[mid]:
        return binary_search_count(words, target, low, mid - 1, count)
    else:
        return binary_search_count(words, target, mid + 1, high, count)
def contar_recursiones_por_palabra():
    """
    Lee el archivo 'palabras.txt', ordena la lista de palabras y calcula,
    para cada palabra, el número de recursiones que tomaría encontrarla mediante
    búsqueda binaria.
    
    Imprime en consola cada palabra junto con su cantidad de recursiones.
    """
    try:
        with open("palabras.txt", "r", encoding="utf-8") as f:
            # Se asume que cada línea tiene una palabra; se descartan líneas vacías
            palabras = [line.strip() for line in f if line.strip()]
    except IOError:
        print("Error al abrir 'palabras.txt'. Asegúrate de que el archivo exista y sea legible.")
        return
    # Ordenar la lista, ya que la búsqueda binaria requiere datos ordenados
    palabras.sort()
    
    print("Resultados de la búsqueda binaria (palabra : recursiones):")
    for palabra in palabras:
        rec_count = binary_search_count(palabras, palabra, 0, len(palabras) - 1)
        print(f"  {palabra:<15} : {rec_count}")
if __name__ == "__main__":
    contar_recursiones_por_palabra()
clear
exit
exit
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
info variables array
info address array.0
x/16dw 0x4cde60
exiy
exit
run < input.txt
run < input.txt
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
run < input.txt
exit
break secret_phase
run < input.txt
run
exit
break secret_phase
run
exit
break secret_phase
run
exit
run < input.txt
exit
b phase_4
run < input.txt
exi
run < input.txt
exit
break phase_defused
run
break phase_defused
xit
exit
break phase_defused
run < input.txt
x/s 0x4c714f
exiy
exit
run < input.txt
exit
break secret_phase

run < input.txt
set $i = 1
while $i <= 1001
  > set $ret = fun7( (int (*)())0x4f91f0, $i )
  > if $ret == 7
  >   printf ">>> CLAVE SECRETA: %d\n", $i
  >   break
  > end
  > set $i = $i + 1
> end
while $i <= 1001
  > set $ret = fun7( (int (*)())0x4f91f0, $i )
  > if $ret == 7
  >   printf ">>> CLAVE SECRETA: %d\n", $i
  >   break
  > end
  > set $i = $i + 1
> end
exit
break secret_phase
run < input.txt
set $i = 1
while $i <= 1001
set $ret = fun7( (int (*)())0x4f91f0, $i )
if $ret == 7
printf ">>> CLAVE SECRETA: %d\n", $i
break
end
set $i = $i + 1
end
set $i = 1
while $i <= 1001
print (int) fun7( (void*)0x4f91f0, $i )
  set $i = $i + 1
end
set $i = 1
enn
end
set $i = 1
while $i <= 1001
set $ret = ((int(*)(void*,int)) fun7)( (void*)0x4f91f0, $i )
if $ret == 7
printf ">>> CLAVE SECRETA: %d\n", $i
break
end
set $i = $i + 1
end
exiy
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
exit
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
exot
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
exit
run < input.txt
exit
