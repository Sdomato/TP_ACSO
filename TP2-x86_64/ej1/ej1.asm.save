; /** defines bool y puntero **/
%define NULL 0
%define TRUE 1
%define FALSE 0

section .data

section .text

global string_proc_list_create_asm
global string_proc_node_create_asm
global string_proc_list_add_node_asm
global string_proc_list_concat_asm

; FUNCIONES auxiliares que pueden llegar a necesitar:
extern malloc
extern free
extern str_concat

;-----------------------------------------------
; string_proc_list_create_asm:
;   Crea una lista vacía reservando memoria para la
;   estructura string_proc_list (dos punteros de 8 bytes cada uno).
;
;   Se utiliza la función externa malloc para asignar 16 bytes.
;   Posteriormente, se inicializan los campos "first" y "last" a NULL.
;
;   Convensión de llamadas: System V x86_64.
;
; Externos:
;   malloc  (se espera que reciba el tamaño en RDI y retorne el puntero en RAX)
;-----------------------------------------------


string_proc_list_create_asm:
    ; Reservar 16 bytes: size = 16 (para dos punteros de 8 bytes)
    mov rdi, 16             ; rdi = 16
    call malloc             ; llama a malloc; el resultado se ubica en rax

    ; Verificar que malloc haya devuelto una dirección válida
    test rax, rax           ; compara rax con 0
    jz .return_null         ; si rax == 0, salta y retorna NULL

    ; Inicializar la estructura:
    ; list->first = NULL  (offset 0)
    mov qword [rax], 0
    ; list->last = NULL   (offset 8)
    mov qword [rax+8], 0

    ret

.return_null:
    ; En caso de fallo en malloc, se retorna NULL (rdi ya sería 0)
    ret



string_proc_node_create_asm:

string_proc_list_add_node_asm:

string_proc_list_concat_asm:

